
import streamlit as st
import cv2
import numpy as np
from PIL import Image, ImageDraw, ImageFont
from collections import Counter
import requests
import io

LABEL_MAP = {
    "questions": {"name": "qapalƒ± sual", "color": (0, 255, 0)},
    "questions_o": {"name": "a√ßƒ±q sual", "color": (0, 165, 255)},
}
DEFAULT_STYLE = {"name": "dig…ôr", "color": (255, 0, 0)}
BACKEND_API_URL = "https://b350b8a2287d.ngrok-free.app/detect"

@st.cache_resource
def load_roboflow_model():
    st.write("Roboflow modeli y√ºkl…ônir...")
    try:
        from roboflow import Roboflow
        api_key = st.secrets["ROBOFLOW_API_KEY"]
        workspace = st.secrets["ROBOFLOW_WORKSPACE"]
        project = st.secrets["ROBOFLOW_MODEL"]
        version = st.secrets["ROBOFLOW_VERSION"]
        rf = Roboflow(api_key=api_key)
        project_obj = rf.workspace(workspace).project(project)
        model = project_obj.version(version).model
        st.write("Roboflow modeli y√ºkl…ôndi.")
        return model
    except ImportError:
        st.error("Roboflow kitabxanasƒ± tapƒ±lmadƒ±. Z…ôhm…ôt olmasa qura≈üdƒ±rƒ±n: pip install roboflow")
        return None
    except KeyError:
        st.error("Roboflow API a√ßarlarƒ± Streamlit secrets-d…ô tapƒ±lmadƒ±. Z…ôhm…ôt olmasa yoxlayƒ±n.")
        return None
    except Exception as e:
        st.error(f"Roboflow modeli y√ºkl…ôn…ôrk…ôn x…ôta ba≈ü verdi: {e}")
        return None

def draw_roboflow_predictions(original_image, predictions):
    output_image_rgb = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)
    pil_image = Image.fromarray(output_image_rgb)
    draw = ImageDraw.Draw(pil_image)
    try:
        font = ImageFont.truetype("fonts/Roboto-Medium.ttf", 15)
    except IOError:
        font = ImageFont.load_default()
    original_height, original_width, _ = original_image.shape
    x_scale = original_width / 640.0
    y_scale = original_height / 640.0
    for pred in predictions.get('predictions', []):
        center_x, center_y = pred['x'] * x_scale, pred['y'] * y_scale
        width, height = pred['width'] * x_scale, pred['height'] * y_scale
        confidence, raw_label = pred['confidence'], pred['class']
        style = LABEL_MAP.get(raw_label, DEFAULT_STYLE)
        display_name, color = style["name"], style["color"]
        x1, y1, x2, y2 = center_x - width / 2, center_y - height / 2, center_x + width / 2, center_y + height / 2
        draw.rectangle([x1, y1, x2, y2], outline=color, width=3)
        text = f"{display_name} ({confidence:.2f})"
        text_bbox = draw.textbbox((0, 0), text, font=font)
        text_width, text_height = text_bbox[2] - text_bbox[0], text_bbox[3] - text_bbox[1]
        draw.rectangle([x1, y1 - text_height - 10, x1 + text_width + 5, y1], fill=color)
        draw.text((x1 + 5, y1 - text_height - 7), text, font=font, fill=(0, 0, 0))
    return cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)

def draw_backend_predictions(original_image, detections):
    pil_image = Image.fromarray(cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB))
    draw = ImageDraw.Draw(pil_image)
    try:
        font = ImageFont.truetype("fonts/Roboto-Medium.ttf", 15)
    except IOError:
        font = ImageFont.load_default()
    for det in detections:
        x1, y1, x2, y2 = det['box_coordinates']
        raw_label = det['class_name']
        confidence = det['confidence_score']
        style = LABEL_MAP.get(raw_label, DEFAULT_STYLE)
        display_name, color = style["name"], style["color"]
        draw.rectangle([x1, y1, x2, y2], outline=color, width=3)
        text = f"{display_name} ({confidence:.2f})"
        text_bbox = draw.textbbox((0, 0), text, font=font)
        text_width, text_height = text_bbox[2] - text_bbox[0], text_bbox[3] - text_bbox[1]
        text_bg_y1 = y1 - text_height - 10
        if text_bg_y1 < 0:
            text_bg_y1 = y1 + 5
        draw.rectangle([x1, text_bg_y1, x1 + text_width + 10, text_bg_y1 + text_height + 10], fill=color)
        draw.text((x1 + 5, text_bg_y1 + 5), text, font=font, fill=(0, 0, 0))
    return cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)

st.set_page_config(page_title="Model Test Platformasƒ±", page_icon="ü§ñ", layout="wide")
st.title("üìÑ Exam Question Detector")
st.markdown("""
### Hansƒ± Modeli Se√ßm…ôli?

- **Roboflow (Server) ‚òÅÔ∏è:** Bu, Roboflow platformasƒ±nda d√ºz…ôltdiyimiz modeldir. S√ºr…ôtlidir v…ô y√ºks…ôk doƒüruluq faizi g√∂st…ôrir. 

- **Lokal (API-Backend) üíª:**  Bu, Google Colab-da t…ôlim etdirdiyimiz modelimizdir. Bu se√ßim edildikd…ô, b√ºt√ºn analiz k…ônar bir xidm…ôt…ô m√ºraci…ôt etm…ôd…ôn, birba≈üa bizim serverimizd…ô √ßalƒ±≈üƒ±r. H…ôm√ßinin siz lokalƒ±nƒ±zda √ßalƒ±≈üdƒ±ra bil…ôrsiniz. Dig…ôr modeld…ôn m√º…ôyy…ôn q…ôd…ôr gec n…ôtic…ô g√∂st…ôr…ô bil…ôr. 
---

### ∆èn Yax≈üƒ± N…ôtic…ôni Almaq √ú√ß√ºn B…ôl…ôd√ßi üí°
Y√ºkl…ôdiyiniz ≈ü…ôklin keyfiyy…ôti, modelin n…ô q…ôd…ôr d…ôqiq i≈ül…ôm…ôsin…ô birba≈üa t…ôsir edir. ∆èn yax≈üƒ± n…ôtic…ô √º√ß√ºn bu sad…ô qaydalara …ôm…ôl etm…ôy…ô √ßalƒ±≈üƒ±n:

- **üì∏ D√ºz Bucaq Altƒ±nda √á…ôkin:** ≈û…ôkli, sanki bir skanerd…ôn √ßƒ±xmƒ±≈ü kimi, tam yuxarƒ±dan √ß…ôkin. Yandan v…ô ya bucaq altƒ±nda √ß…ôkilmi≈ü ≈ü…ôkill…ôr obyektl…ôrin formasƒ±nƒ± pozur v…ô modelin onlarƒ± tanƒ±masƒ±nƒ± √ß…ôtinl…ô≈üdirir.
- **‚¨ÜÔ∏è D√ºzg√ºn ƒ∞stiqam…ôtd…ô Y√ºkl…ôyin:** ≈û…ôklin dik (portret) v…ôziyy…ôtd…ô olduƒüundan v…ô yazƒ±nƒ±n d√ºz oxunduƒüundan …ômin olun. Ba≈üƒ±a≈üaƒüƒ± v…ô ya yana √ßevrilmi≈ü ≈ü…ôkill…ôr modeli √ßa≈üdƒ±racaq.
- **‚òÄÔ∏è Aydƒ±n ƒ∞≈üƒ±qda √á…ôkin:** K√∂lg…ôsiz v…ô aydƒ±n bir m√ºhitd…ô √ß…ôkilmi≈ü ≈ü…ôkill…ôr …ôn yax≈üƒ± n…ôtic…ôni verir. M…ôtnin r…ôngi il…ô fonun r…ôngi n…ô q…ôd…ôr aydƒ±n se√ßil…ôrs…ô, model o q…ôd…ôr yax≈üƒ± i≈ül…ôy…ôr.
- **‚öôÔ∏è √ñl√ß√º M…ôs…ôl…ôsini Biz…ô H…ôval…ô Edin:** Modelin …ôn kritik t…ôl…ôbi, analizin **m√ºtl…ôq 640x640 piksel** √∂l√ß√ºl√º ≈ü…ôkil √ºz…ôrind…ô aparƒ±lmasƒ±dƒ±r. Narahat olmayƒ±n, bu hiss…ôni biz avtomatik edirik! Siz sad…ôc…ô m√ºmk√ºn olan …ôn keyfiyy…ôtli ≈ü…ôkli y√ºkl…ôyin, proqramƒ±mƒ±z onu model √º√ß√ºn ideal √∂l√ß√ºy…ô √∂z√º g…ôtir…ôc…ôk.
""")
st.divider()

with st.sidebar:
    st.header("T…ônziml…ôm…ôl…ôr")
    model_choice = st.radio(
        "Hansƒ± modeli istifad…ô edirsiniz?",
        ('Roboflow (Server)', 'Lokal (API-Backend)'),
        horizontal=True
    )
    st.divider()
    
    if model_choice == 'Roboflow (Server)':
        default_confidence = 0.50
    else:
        default_confidence = 0.65

    confidence_threshold = st.slider(
        "Confidence Level", 0.0, 1.0, default_confidence, 0.05
    )

    uploaded_file = st.file_uploader("Bir ≈ü…ôkil se√ßin...", type=["jpg", "jpeg", "png"])
    submit_button = st.button("Obyektl…ôri T…ôsbit Et")

#
if uploaded_file is not None and submit_button:
    original_image = cv2.imdecode(np.frombuffer(uploaded_file.getvalue(), np.uint8), 1)
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Orijinal ≈û…ôkil")
        st.image(original_image, channels="BGR", use_container_width=True)

    with st.spinner(f"'{model_choice}' il…ô obyektl…ôr t…ôsbit edilir..."):
        all_predictions = []
        output_image = original_image.copy()

        if model_choice == 'Roboflow (Server)':
            model = load_roboflow_model()
            if model:
                image_for_model = cv2.resize(original_image, (640, 640), interpolation=cv2.INTER_AREA)
                predictions_json = model.predict(image_for_model, confidence=confidence_threshold).json()
                all_predictions = predictions_json.get('predictions', [])
                output_image = draw_roboflow_predictions(original_image, predictions_json)
        
        else: 
            try:
                files = {'file': (uploaded_file.name, uploaded_file.getvalue(), uploaded_file.type)}
                
                payload = {'confidence': confidence_threshold}
                response = requests.post(BACKEND_API_URL, files=files, data=payload, timeout=60)
                
                if response.status_code == 200:
                    data = response.json()
                    backend_detections = data.get('detections', [])
                    output_image = draw_backend_predictions(original_image, backend_detections)
                    for det in backend_detections:
                        all_predictions.append({'class': det['class_name'], 'confidence': det['confidence_score']})
                else:
                    st.error(f"Backend x…ôtasƒ± (Kod: {response.status_code}): {response.text}")
            except requests.exceptions.ConnectionError:
                st.error("‚ùå Backend-…ô qo≈üulmaq m√ºmk√ºn olmadƒ±! Z…ôhm…ôt olmasa, `uvicorn main:app --reload` …ômrinin i≈ül…ôdiyind…ôn …ômin olun.")
            except Exception as e:
                st.error(f"G√∂zl…ônilm…ôz bir x…ôta ba≈ü verdi: {e}")

        with col2:
            st.subheader("N…ôtic…ô")
            st.image(output_image, channels="BGR", use_container_width=True)
            
    st.subheader("Statistika")
    total_objects = len(all_predictions)
    if total_objects > 0:
        stats = Counter(p['class'] for p in all_predictions)
        summary_text = f"**C…ômi {total_objects} obyekt tapƒ±ldƒ±:**"
        details_list = [f"{count} {LABEL_MAP.get(name, DEFAULT_STYLE)['name']}" for name, count in stats.items()]
        st.markdown(f"{summary_text} {', '.join(details_list)}.")
    else:
        st.warning("Bu g√ºv…ôn e≈üiyi il…ô he√ß bir obyekt tapƒ±lmadƒ±.")
    
elif not submit_button:
     st.info("Ba≈ülamaq √º√ß√ºn soldakƒ± paneld…ôn bir ≈ü…ôkil y√ºkl…ôyin, modeli se√ßin v…ô 'Obyektl…ôri T…ôsbit Et' d√ºym…ôsin…ô basƒ±n.")